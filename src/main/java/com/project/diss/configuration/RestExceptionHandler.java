package com.project.diss.configuration;

import com.project.diss.dto.ErrorResponse;
import com.project.diss.exception.*;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.web.bind.MissingRequestCookieException;
import org.springframework.web.bind.MissingRequestHeaderException;
import org.springframework.web.bind.MissingRequestValueException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

import static com.project.diss.exception.ServiceErrorCodes.INTERNAL_SERVER_ERROR;

@Slf4j
@Order(Ordered.HIGHEST_PRECEDENCE)
@ControllerAdvice
public class RestExceptionHandler {

    /**
     * Handles all {@link Throwable}s that aren't caught by more specific handlers.
     * <b>IMPORTANT:</b> This is only the last resort to prevent the exposure of error information generated by Spring Boot. The error message
     * uses a generic internal server error messages.
     */
    @ExceptionHandler({Throwable.class})
    public ResponseEntity<ErrorResponse> handleThrowable(Throwable throwable) {
        log.error("There was an unexpected exception while handling the request.", throwable);
        return ResponseEntity.internalServerError().body(createErrorResponse());
    }

    /**
     * Handles Missing request exceptions.
     */
    @ExceptionHandler({
            HttpMessageNotReadableException.class,
            MissingRequestHeaderException.class,
            MissingRequestValueException.class,
            MissingRequestCookieException.class
    })
    public ResponseEntity<Object> handleRequestException(Exception exception) {
        log.info("The request was missing a required parameter.", exception);
        return ResponseEntity.badRequest().build();
    }

    /**
     * Handles {@link AuthenticationException}s
     */
    @ExceptionHandler({AuthenticationException.class})
    public ResponseEntity<ErrorResponse> handleException(AuthenticationException accountNotFoundException) {
        return new ResponseEntity<>(createErrorResponse(accountNotFoundException), HttpStatus.NOT_FOUND);
    }

    /**
     * Handles {@link AccessDeniedException}s
     */
    @ExceptionHandler(AccessDeniedException.class)
    public ResponseEntity<Object> handleAccessDeniedException() {
        return new ResponseEntity<>(createAccessDeniedErrorResponse(), HttpStatus.FORBIDDEN);
    }

    /**
     * Handles {@link ConflictException}s.
     */
    @ExceptionHandler({ConflictException.class})
    public ResponseEntity<ErrorResponse> handleException(ConflictException conflictException) {
        return new ResponseEntity<>(createErrorResponse(conflictException), HttpStatus.CONFLICT);
    }

    /**
     * Handles {@link EntityNotFoundException}s.
     */
    @ExceptionHandler({EntityNotFoundException.class})
    public ResponseEntity<ErrorResponse> handleException(EntityNotFoundException entityNotFoundException) {
        return new ResponseEntity<>(createErrorResponse(entityNotFoundException), HttpStatus.NOT_FOUND);
    }

    /**
     * Handles {@link CustomException}s
     */
    @ExceptionHandler({CustomException.class})
    public ResponseEntity<ErrorResponse> handleException(CustomException customException) {
        return new ResponseEntity<>(createErrorResponse(customException), HttpStatus.BAD_REQUEST);
    }

    /**
     * Handles {@link RequestNotValidException}s.
     */
    @ExceptionHandler(RequestNotValidException.class)
    public ResponseEntity<ErrorResponse> handleException(RequestNotValidException requestNotValidException) {
        return new ResponseEntity<>(createErrorResponse(requestNotValidException), HttpStatus.BAD_REQUEST);
    }

    /**
     * Creates a {@link ErrorResponse} from parameters from the {@link BaseException}.
     *
     * @param baseException containing the error parameters
     * @return the {@link ErrorResponse}
     */
    private ErrorResponse createErrorResponse(BaseException baseException) {
        final ErrorResponse errorResponse = new ErrorResponse();
        errorResponse.setErrorCode(baseException.getErrorCode());
        errorResponse.setErrorName(baseException.getErrorName());
        errorResponse.setErrorMessage(baseException.getErrorMessage());
        return errorResponse;
    }

    /**
     * Creates a {@link ErrorResponse} for the given request and throwable. The result is a generic HTTP 500 error response.
     *
     * @return the error response
     */
    protected ErrorResponse createErrorResponse() {
        final ErrorResponse errorResponse = new ErrorResponse();
        errorResponse.setErrorCode(INTERNAL_SERVER_ERROR.errorCode());
        errorResponse.setErrorName(INTERNAL_SERVER_ERROR.errorName());
        errorResponse.setErrorMessage(INTERNAL_SERVER_ERROR.errorMessage());
        return errorResponse;
    }

    protected ErrorResponse createAccessDeniedErrorResponse() {
        final ErrorResponse errorResponse = new ErrorResponse();
        errorResponse.setErrorCode(ServiceErrorCodes.ACCESS_DENIED_ERROR.errorCode());
        errorResponse.setErrorName(ServiceErrorCodes.ACCESS_DENIED_ERROR.errorName());
        errorResponse.setErrorMessage(ServiceErrorCodes.ACCESS_DENIED_ERROR.errorMessage());
        return errorResponse;
    }

}
